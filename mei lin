#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Structure pour un noeud (espèce)
typedef struct Node {
    int vertex;
    float weight;
    struct Node* next;
} Node;

// Structure pour le graphe
typedef struct Graph {
    int numVertices;
    Node** adjLists;
} Graph;

// Fonction pour créer un graphe
Graph* createGraph(int vertices) {
    Graph* graph = malloc(sizeof(Graph));
    graph->numVertices = vertices;
    graph->adjLists = malloc(vertices * sizeof(Node*));

    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
    }

    return graph;
}

// Fonction pour ajouter une arête (relation trophique)
void addEdge(Graph* graph, int src, int dest, float weight) {
    Node* newNode = malloc(sizeof(Node));
    newNode->vertex = dest;
    newNode->weight = weight;
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
}

// Fonction pour afficher le graphe (liste d'adjacence)
void printGraph(Graph* graph) {
    for (int i = 0; i < graph->numVertices; i++) {
        Node* temp = graph->adjLists[i];
        printf("Species %d:\n", i);
        while (temp) {
            printf(" -> Species %d (Weight: %.2f)\n", temp->vertex, temp->weight);
            temp = temp->next;
        }
    }
}

// BFS (Breadth-First Search) : Parcours en largeur
void BFS(Graph* graph, int startVertex) {
    bool* visited = malloc(graph->numVertices * sizeof(bool));
    for (int i = 0; i < graph->numVertices; i++) {
        visited[i] = false;
    }

    int* queue = malloc(graph->numVertices * sizeof(int));
    int front = 0, rear = 0;

    visited[startVertex] = true;
    queue[rear++] = startVertex;

    while (front < rear) {
        int currentVertex = queue[front++];
        printf("Visited %d\n", currentVertex);

        Node* temp = graph->adjLists[currentVertex];
        while (temp) {
            int adjVertex = temp->vertex;
            if (!visited[adjVertex]) {
                visited[adjVertex] = true;
                queue[rear++] = adjVertex;
            }
            temp = temp->next;
        }
    }

    free(visited);
    free(queue);
}

// DFS (Depth-First Search) : Parcours en profondeur
void DFS(Graph* graph, int startVertex, bool* visited) {
    visited[startVertex] = true;
    printf("Visited %d\n", startVertex);

    Node* temp = graph->adjLists[startVertex];
    while (temp) {
        int adjVertex = temp->vertex;
        if (!visited[adjVertex]) {
            DFS(graph, adjVertex, visited);
        }
        temp = temp->next;
    }
}

void DFSWrapper(Graph* graph, int startVertex) {
    bool* visited = malloc(graph->numVertices * sizeof(bool));
    for (int i = 0; i < graph->numVertices; i++) {
        visited[i] = false;
    }
    DFS(graph, startVertex, visited);
    free(visited);
}

int main() {
    // Création du graphe pour 11 espèces (ou sommets)
    Graph* graph = createGraph(11);

    // Ajouter les arêtes (relations trophiques)
    addEdge(graph, 0, 1, 0.8); // Phytoplancton -> Zooplancton
    addEdge(graph, 1, 2, 0.7); // Zooplancton -> Poisson clown
    addEdge(graph, 2, 3, 0.6); // Poisson clown -> Raie
    addEdge(graph, 3, 4, 0.2); // Raie -> Serran
    addEdge(graph, 4, 5, 0.7); // Serran -> Thon
    addEdge(graph, 5, 6, 0.7); // Thon -> Requin
    addEdge(graph, 6, 7, 0.4); // Requin -> Orque
    addEdge(graph, 2, 8, 0.5); // Poisson clown -> Crevette
    addEdge(graph, 3, 9, 0.6); // Raie -> Crabe
    addEdge(graph, 10, 1, 0.9); // Algue -> Poisson chirugien

    // Appliquer BFS à partir de Phytoplancton (sommet 0)
    printf("BFS starting from Phytoplancton:\n");
    BFS(graph, 0);

    // Appliquer DFS à partir de Orque (sommet 7)
    printf("\nDFS starting from Orque:\n");
    DFSWrapper(graph, 7);

    // Libérer la mémoire
    free(graph->adjLists);
    free(graph);

    return 0;
}
